# -*- coding: utf-8 -*-
"""DFS and BFS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16ATcNUQ3Rch8_gnDIdTunFuZpLP4qgrd
"""

import matplotlib.pyplot as plt
import networkx as nx
from collections import deque


class graph_structure:

    def __init__(self):
        self.graph = {}

    def add_edge(self, node, neighbor):
        """
        เพิ่มเส้นเชื่อมแบบไม่ระบุทิศทาง (Undirected)
        ระหว่าง node และ neighbor
        """
        if node not in self.graph:
            self.graph[node] = []
        if neighbor not in self.graph:
            self.graph[neighbor] = []

        self.graph[node].append(neighbor)
        self.graph[neighbor].append(node)

    def show_graph(self):
        """
        แสดงกราฟแบบข้อความ (Adjacency List)
        """
        print("--- Graph Structure (Adjacency List) ---")
        for node, neighbors in self.graph.items():
            print(f"{node} -> {neighbors}")

    def plot_graph(self, highlight_nodes=None, title="Graph Structure"):
        """
        วาดกราฟเป็นภาพ พร้อมระบายสีโหนดที่กำหนด
        """
        G = nx.Graph(self.graph)
        pos = nx.spring_layout(G, seed=42)
        plt.figure(figsize=(6, 4))

        node_colors = []
        for n in G.nodes():
            if highlight_nodes and n in highlight_nodes:
                node_colors.append("lightcoral")
            else:
                node_colors.append("skyblue")

        nx.draw(
            G, pos,
            with_labels=True,
            node_color=node_colors,
            node_size=1200,
            font_size=12,
            font_weight='bold',
            edge_color='gray'
        )

        plt.title(title)
        plt.show()

    def bfs(self, start):
        """
        Breadth-First Search (การค้นหาตามแนวกว้าง)
        """
        print(f"\n--- BFS Traversal starting from '{start}' ---")

        visited = set()

        queue = deque([start])
        visited.add(start)

        traversal_order = []

        if start not in self.graph:
            print(f"Error: Node '{start}' not in the graph.")
            return

        while queue:
            # ดึงโหนดแรกออกจากคิว
            node = queue.popleft()
            traversal_order.append(node)
            print(f"Visiting: {node}")

            # ค้นหาเพื่อนบ้าน (neighbors) ทั้งหมดของโหนดปัจจุบัน
            for neighbor in self.graph[node]:
                if neighbor not in visited:
                    visited.add(neighbor)  # มาร์คว่าไปเยือนแล้ว
                    queue.append(neighbor)  # เพิ่มเข้าคิวเพื่อไปเยือนทีหลัง

        print(f"BFS Order: {traversal_order}")

        return traversal_order

    def dfs(self, start):
        """
        Depth-First Search (การค้นหาตามแนวลึก)
        (ในที่นี้ใช้แบบ Recursive เพื่อง่ายต่อการทำความเข้าใจ)
        """
        print(f"\n--- DFS Traversal starting from '{start}' ---")

        visited = set()

        traversal_order = []

        if start not in self.graph:
            print(f"Error: Node '{start}' not in the graph.")
            return

        def dfs_recursive(node):
            visited.add(node)
            traversal_order.append(node)
            print(f"Visiting: {node}")

            # ค้นหาเพื่อนบ้าน (neighbors) ทั้งหมด
            for neighbor in self.graph[node]:
                # ถ้ายังไม่เคยไปเยือนเพื่อนบ้านคนนี้
                if neighbor not in visited:
                    # เรียกตัวเองซ้ำทันที (ดำดิ่งลงไป)
                    dfs_recursive(neighbor)

        dfs_recursive(start)

        print(f"DFS Order: {traversal_order}")

        return traversal_order


if __name__ == "__main__":
    g = graph_structure()
    g.add_edge('A', 'B')
    g.add_edge('A', 'C')
    g.add_edge('B', 'D')
    g.add_edge('C', 'D')
    g.add_edge('D', 'E')

    print("Graph Structure Created.")
    g.show_graph()
    g.plot_graph()

    g.bfs('A')
    g.dfs('A')